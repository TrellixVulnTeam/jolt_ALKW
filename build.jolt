from jolt import Alias, BooleanParameter, Parameter, Task, TaskGenerator, Tools
from jolt import attributes, influence
from jolt.plugins import docker, git, selfdeploy

from os import getenv
_version = getenv("JOLT_VERSION")


class Jolt(selfdeploy.Jolt):
    version = Parameter(_version)

    def publish(self, artifact, tools):
          super().publish(artifact, tools)
          with tools.cwd(artifact.path):
               tools.replace_in_file("setup.py", "0.9.13", "{version}")


@influence.files("{dockerfile}")
@influence.files("**/*.py")
@attributes.requires("requires_push_{push}")
class JoltImage(docker.DockerImage):
    name = "jolt/image"
    dockerfile = "docker/Dockerfile"
    push = BooleanParameter(False)
    requires = ["jolt:version={version}", "docker/cli"]
    requires_push_true = ["docker/login"]
    tags = ["robrt/jolt:latest", "robrt/jolt:{version}"]
    version = Parameter(_version)

    def run(self, deps, tools):
         self.context = tools.sandbox(deps["jolt:version={version}"])
         tools.copy("{dockerfile}", "{context}/docker/")
         super().run(deps, tools)


@influence.files("{dockerfile}")
@attributes.requires("requires_push_{push}")
class RabbitImage(docker.DockerImage):
    name = "jolt/rabbitmq"
    buildargs = ["VERSION={version}"]
    dockerfile = "docker/Dockerfile.rabbitmq"
    push = BooleanParameter(False)
    requires = ["docker/cli"]
    requires_push_true = ["docker/login"]
    tags = ["robrt/rabbitmq:latest", "robrt/rabbitmq:{version}"]
    version = Parameter("3.9")


@influence.files("**/*.py")
@git.influence("docs")
class JoltDocs(Task):
    name = "jolt/docs"

    def run(self, deps, tools):
        with tools.cwd("docs"):
            tools.run("make clean html")

    def publish(self, artifact, tools):
        with tools.cwd("docs/_build/html"):
            artifact.collect("*")


@attributes.environ("TWINE_USERNAME")
@attributes.environ("TWINE_PASSWORD")
@influence.whitelist("dist/**")
class JoltWheel(Task):
    name = "jolt/pypi"

    release = BooleanParameter(False)
    requires = ["jolt:version={version}"]
    version = Parameter(_version)

    def run(self, deps, tools):
        tools.run("python3 -m pip install --upgrade setuptools wheel")
        tools.run("python3 -m pip install --upgrade twine")
        self.builddir = tools.sandbox(deps["jolt:version={version}"])
        with tools.cwd(self.builddir):
             tools.run("python3 setup.py sdist bdist_wheel")
             if self.release:
                  tools.run("python3 -m twine upload dist/*")

    def publish(self, artifact, tools):
        with tools.cwd(self.builddir):
             artifact.collect("dist")


class Default(Alias):
    @property
    def push(self):
        return "true" if getenv("JOLT_VERSION") else "false"

    requires = [
        "jolt/image:push={push}",
        "jolt/pypi:release={push}",
        "jolt/rabbitmq:push={push}",
    ]
