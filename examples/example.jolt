from jolt import *
from jolt.plugins import git
from platform import system, machine


class Toolchain(Task):
    host = Parameter(system())
    arch = Parameter(machine())
    fast = True


class TestResource(Resource):
    name = "resource"

    def acquire(self, artifact, env, tools):
        log.info("Acquiring resource")

    def release(self, artifact, env, tools):
        log.info("Releasing resource")


class HelloWorld(Task):
    """ Builds the classic Hello World! application """

    name = "hello"
    requires = "git:url=https://github.com/gideont/hello_world.git,sha=d80bb20", "resource", "toolchain"
    flavor = Parameter(default="hello_01", help="Flavor of the hello world application")

    def run(self, deps, tools):
        with tools.cwd("hello_world/{flavor}"):
            tools.run("make")

    def publish(self, artifact, tools):
        with tools.cwd("hello_world"):
            artifact.collect("{flavor}/hello", "bin/", flatten=True)
            artifact.collect("{flavor}/*.so", "bin/", flatten=True)
        artifact.environ.PATH.append("bin")
        artifact.environ.LD_LIBRARY_PATH.append("bin")
        artifact.strings.executable = "hello"


class TestTask(Task):
    """ Runs the Hello World! application """

    name = "test"
    requires = "hello:flavor={property_example}"
    flavor = Parameter(default="hello_01", help="Flavor of the hello world application")

    @property
    def property_example(self):
        return self.flavor.get_value()

    def run(self, deps, tools):
        hello = deps[self.requires[0]]
        tools.run(hello.strings.executable.get_value())


class Example(Task):
    """ Example task which builds and tests two flavors of Hello world! """

    name = "example"
    requires = "test:flavor=hello_01", "test:flavor=hello_02_shared_lib"
    fast = True


class Extension(Task):
    name = "extension"
    extends = "example"
    fast = True

    def run(self, deps, tools):
        log.info("Running extension example")


class SecondExtension(Task):
    name = "second-extension"
    extends = "example"
    fast = True

    def run(self, deps, tools):
        log.info("Running second extension example")


class ExtensionRequirement(Task):
    name = "extension-req"


class ExtensionExtension(Task):
    name = "extension-extension"
    extends = "extension"
    requires = "extension-req"

    def run(self, deps, tools):
        log.info("Running extension extension")


class Intermediate(Task):
    name = "intermediate"
    requires = "example"
    fast = True


class All(Task):
    name = "all"
    requires = "extension", "intermediate", "second-extension"

    def run(self, deps, tools):
        log.info("Running task requiring extended example")


class Exception(Task):
    name = "exception"

    def run(self, deps, tools):
        assert False, "{0} {} {abc}"


class TestExample(Test):
    requires = "hello:flavor=hello_01"

    def test_hello(self):
        self.assertEqual(self.tools.run("hello"), "Hello world!")
