import os

from jolt import *
from jolt.plugins.ninja import CXXLibrary, CXXExecutable, Rule
from jolt import influence


class Toolchain(Task):
    arch = Parameter("x86", values=["x86", "arm"])
    debug = BooleanParameter(False)
    optimize = Parameter("full", values=["no", "debug", "size", "speed", "full"])
    compiler = Parameter("msvc" if os.name == "nt" else "gcc")

    def publish(self, artifact, tools):
        if self.compiler == "gcc":
            cflags = ""
            if self.debug.is_true:
                cflags += " -g"
                cflags += {"no": " -O0",
                           "debug": " -Og"}\
                           .get(str(self.optimize), " -Og")
            else:
                cflags += {"no": " -O0",
                           "debug": " -Og",
                           "size": " -Os",
                           "speed": " -Ofast",
                           "full": " -O3"}\
                           .get(str(self.optimize))

            if str(self.arch) == "x86":
                artifact.environ.CC = "gcc"
                artifact.environ.CXX = "g++"
                artifact.environ.LD = "g++"
            if str(self.arch) == "arm":
                artifact.environ.CC = "arm-linux-gnueabi-gcc"
                artifact.environ.CXX = "arm-linux-gnueabi-g++"
                artifact.environ.LD = "arm-linux-gnueabi-g++"
            artifact.environ.CFLAGS = cflags
            artifact.environ.CXXFLAGS = cflags

        if self.compiler == "msvc":
            cflags = "/EHsc "
            artifact.environ.CFLAGS = cflags
            artifact.environ.CXXFLAGS = cflags


class Lib(CXXLibrary):
    requires = "toolchain"
    headers = "lib/*.h"
    sources = ["lib/*.cpp", "lib/*.x"]
    recipient = Parameter("world")
    macros = ['RECIPIENT="{recipient}"']
    rename_rule = Rule("cp $in $out", infiles=[".x"], outfiles=["{outdir}/{in_path}/{in_base}.c"])


class Exe(CXXExecutable):
    binary = "executable"
    requires = "lib"
    sources = "exe/test.cpp"


class Default(Alias):
    requires = "exe"


# jolt build exe -d toolchain:arch=x86,debug=true
# jolt build exe -d toolchain:arch=arm,optimize=false
