#!/usr/bin/env python

import os
import time

from jolt import *


@influence.files("../README.rst")
@influence.files("../setup.py")
@influence.files("../jolt/*.py")
@influence.files("../jolt/plugins/*.py")
@influence.files("../**/*.conf")
@influence.files("../docker/Dockerfile.*")
@influence.files("../docker/docker-compose-amqp-{storage}.yml")
@influence.files("../docker/config-amqp-{storage}.conf")
class JoltAmqp(Task):
    name = "jolt/amqp"

    storage = Parameter()

    def publish(self, artifact, tools):
        with tools.cwd(".."):
            artifact.collect("**/*.conf")
            artifact.collect("setup.py")
            artifact.collect("jolt/*.py")
            artifact.collect("jolt/plugins/*.py")
            artifact.collect("README.rst")
            artifact.collect("docker/Dockerfile.*", flatten=True)
            artifact.collect("docker/docker-compose-amqp-{storage}.yml", flatten=True)
            artifact.strings.config = tools.read_file("docker/config-amqp-{storage}.conf")


class AmqpWorker(Resource):
    name = "jolt/amqp/deployment"

    storage = Parameter()

    requires = ["jolt/amqp:storage={storage}"]

    def acquire(self, artifact, deps, tools):
        jolt = deps["jolt/amqp:storage={storage}"]
        with tools.cwd(jolt.path):
            try:
                tools.run("docker-compose -f docker-compose-amqp-{storage}.yml up -d")
                output = ""
                while "Queue bound" not in output:
                    time.sleep(1)
                    output = tools.run("docker logs jolt_amqp_worker", output_on_error=True)
                artifact.active = True
            except Exception as e:
                if os.getenv("CI"):
                    artifact.active = False
                else:
                    raise e


    def release(self, artifact, deps, tools):
        jolt = deps["jolt/amqp:storage={storage}"]
        with tools.cwd(jolt.path):
            if artifact.active:
                tools.run("docker-compose -f docker-compose-amqp-{storage}.yml down --volumes")
