#!/usr/bin/env python

import os
import sys
import time
sys.path.append(".")

import testsupport


@testsupport.enable_network_testing
class GitApi(testsupport.JoltTest):
    name = "api/git"


    def _recipe(self):
        return "from jolt.plugins.ninja import *\nfrom jolt.plugins import git\n" + \
            super()._recipe()

    def append(self, filepath, content):
        self.tools.append_file(os.path.join(self.ws, filepath), content)

    def test_head(self):
        """
        --- tasks:
        class Exe(CXXLibrary):
            requires = ["git:url=https://github.com/gideont/hello_world.git"]
            sources = ["hello_world/01_hello_world/*.c"]
            source_influence = False
        ---
        """
        r = self.build("exe")
        self.assertBuild(r, "exe")
        time.sleep(1)
        self.append("hello_world/01_hello_world/hello.c", '#error "xfailx"\n')
        with self.assertRaises(Exception):
            r = self.build("exe")
        self.assertBuild(r, "exe")
        self.assertIn("xfailx", self.lastLog())

    def test_head_with_unstaged_filed(self):
        """
        --- tasks:
        class Exe(Task):
            requires = ["git:url=https://github.com/gideont/hello_world.git"]
        ---
        """
        r = self.build("exe")
        self.assertBuild(r, "exe")
        time.sleep(1)
        self.append("hello_world/01_hello_world/world.c", '#error "xfailx"\n')
        r = self.build("exe")
        self.assertBuild(r, "exe")

    def test_sha_commit(self):
        """
        --- tasks:
        class Exe(CXXExecutable):
            requires = ["git:url=https://github.com/gideont/hello_world.git,sha=74cf3e97a3"]
            sources = ["hello_world/01_hello_world/*.c"]
            source_influence = False
        ---
        """
        r = self.build("exe")
        with self.tools.cwd(self.ws, "hello_world"):
            if not self.network:
                self.assertIn("74cf3e97a3", self.tools.run("git rev-parse HEAD"))
        time.sleep(1)
        self.append("hello_world/01_hello_world/hello.c", '\n\n')
        if not self.network:
            with self.assertRaises(Exception, msg="has local changes"):
                self.build("exe")
        else:
            self.build("exe")

    def test_sha_branch(self):
        """
        --- tasks:
        class Exe(CXXExecutable):
            requires = ["git:url=https://github.com/gideont/hello_world.git,sha=origin/master"]
            sources = ["hello_world/01_hello_world/*.c"]
            source_influence = False
        ---
        """
        self.build("exe")
        time.sleep(1)
        self.append("hello_world/01_hello_world/hello.c", '\n\n')
        if not self.network:
            with self.assertRaises(Exception, msg="has local changes"):
                self.build("exe")
        else:
            self.build("exe")

    def test_sha_bad(self):
        """
        --- tasks:
        class Exe(CXXExecutable):
            requires = ["git:url=https://github.com/gideont/hello_world.git,sha=bad"]
            sources = ["hello_world/01_hello_world/*.c"]
            source_influence = False
        ---
        """
        with self.assertRaises(Exception):
            self.build("exe")

    def test_src_head(self):
        """
        --- tasks:
        class Exe(CXXLibrary):
            requires = ["git-src:url=https://github.com/gideont/hello_world.git"]
        ---
        """
        self.build("exe")
        time.sleep(1)
        self.append("hello_world/01_hello_world/hello.c", '#error "xfailx"\n')
        r = self.build("exe")
        self.assertNoBuild(r, "exe")

    def test_influence_copies(self):
        """
        --- tasks:
        class A(Task):
            requires = ["git:url=https://github.com/gideont/hello_world.git,path=a"]
        class B(Task):
            requires = ["git:url=https://github.com/gideont/hello_world.git,path=b"]
        ---
        """
        r1 = self.build("a b")
        orig = self.artifacts(r1)
        self.assertEqual(len(orig), 2)

        self.tools.write_file("{ws}/a/file.txt", "data")
        r2 = self.build("a b")
        a2 = self.artifacts(r2)
        self.assertBuild(r2, "a")
        self.assertNoBuild(r2, "b")
        self.assertEqual(len(set(orig).intersection(set(a2))), 1)

        self.tools.run("rm {ws}/a/file.txt")
        self.tools.write_file("{ws}/b/file.txt", "data")
        r3 = self.build("a b")
        a3 = self.artifacts(r2)
        self.assertNoBuild(r3, "a")
        self.assertBuild(r3, "b")
        self.assertEqual(len(set(orig).intersection(set(a3))), 1)

        self.tools.run("rm {ws}/b/file.txt")
        r4 = self.build("a b")
        self.assertNoBuild(r4, "a")
        self.assertNoBuild(r4, "b")
        reverted = self.artifacts(r4)
        self.assertEqual(orig, reverted)

    def test_explicit_influence_copies(self):
        """
        --- tasks:
        @git.influence("a")
        class A(Task):
            requires = ["git-src:url=https://github.com/gideont/hello_world.git,path=a"]
        @git.influence("b")
        class B(Task):
            requires = ["git-src:url=https://github.com/gideont/hello_world.git,path=b"]
        ---
        """
        r1 = self.build("a b")
        orig = self.artifacts(r1)
        self.assertEqual(len(orig), 2)

        self.tools.write_file("{ws}/a/file.txt", "data")
        r2 = self.build("a b")
        a2 = self.artifacts(r2)
        self.assertBuild(r2, "a")
        self.assertNoBuild(r2, "b")
        self.assertEqual(len(set(orig).intersection(set(a2))), 1)

        self.tools.run("rm {ws}/a/file.txt")
        self.tools.write_file("{ws}/b/file.txt", "data")
        r3 = self.build("a b")
        a3 = self.artifacts(r2)
        self.assertNoBuild(r3, "a")
        self.assertBuild(r3, "b")
        self.assertEqual(len(set(orig).intersection(set(a3))), 1)

        self.tools.run("rm {ws}/b/file.txt")
        r4 = self.build("a b")
        self.assertNoBuild(r4, "a")
        self.assertNoBuild(r4, "b")
        reverted = self.artifacts(r4)
        self.assertEqual(orig, reverted)

    def test_explicit_influence_copies_subdir(self):
        """
        --- tasks:
        @git.influence("a/01_hello_world")
        class A(Task):
            requires = ["git-src:url=https://github.com/gideont/hello_world.git,path=a"]
        @git.influence("b/01_hello_world")
        class B(Task):
            requires = ["git-src:url=https://github.com/gideont/hello_world.git,path=b"]
        ---
        """
        r1 = self.build("a b")
        orig = self.artifacts(r1)
        self.assertEqual(len(orig), 2)

        self.tools.write_file("{ws}/a/01_hello_world/file.txt", "data")
        r2 = self.build("a b")
        a2 = self.artifacts(r2)
        self.assertBuild(r2, "a")
        self.assertNoBuild(r2, "b")
        self.assertEqual(len(set(orig).intersection(set(a2))), 1)

        self.tools.run("rm {ws}/a/01_hello_world/file.txt")
        self.tools.write_file("{ws}/b/01_hello_world/file.txt", "data")
        r3 = self.build("a b")
        a3 = self.artifacts(r2)
        self.assertNoBuild(r3, "a")
        self.assertBuild(r3, "b")
        self.assertEqual(len(set(orig).intersection(set(a3))), 1)

        self.tools.run("rm {ws}/b/01_hello_world/file.txt")
        r4 = self.build("a b")
        self.assertNoBuild(r4, "a")
        self.assertNoBuild(r4, "b")
        reverted = self.artifacts(r4)
        self.assertEqual(orig, reverted)
