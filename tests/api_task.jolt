import sys
import time
sys.path.append(".")

from testsupport import JoltTest


class TaskApi(JoltTest):
    name = "api/task"

    def test_name(self):
        """
        --- tasks:
        class Explicit(Task):
            name = "explicit1"
        ---
        """
        self.jolt("build explicit1")

    def test_name_inferred(self):
        """
        --- tasks:
        class Inferred(Task):
            pass
        ---
        """
        self.jolt("build inferred")

    def test_name_symbols(self):
        """
        --- tasks:
        class Name(Task):
            name = "a&b/c(d)#"
        ---
        """
        self.jolt("build 'a&b/c(d)#'")

    def test_cacheable(self):
        """
        --- tasks:
        class NonCacheable(Task):
            cacheable = False

        class Cacheable(Task):
            cacheable = True
        ---
        """
        r = self.jolt("build cacheable")
        self.assertBuild(r, "cacheable")
        r = self.jolt("build cacheable")
        self.assertNoBuild(r, "cacheable")

        r = self.jolt("build noncacheable")
        self.assertBuild(r, "noncacheable")
        r = self.jolt("build noncacheable")
        self.assertBuild(r, "noncacheable")
        self.assertNoArtifact(r)

    def test_expires_whenunused(self):
        """
        --- tasks:
        class WhenUnused(Task):
            i = Parameter()
            expires = expires.WhenUnusedFor(seconds=3)

        class WhenUnusedArgs(Task):
            expires = expires.After(weeks=1,days=1,hours=1,minutes=1,seconds=1)

        --- config:
        cachesize = 0G
        ---
        """
        r1 = self.jolt("build whenunused:i=1")
        self.assertArtifact(r1)
        time.sleep(3)

        # This evicts i=1
        r2 = self.jolt("build whenunused:i=2")
        self.assertNoArtifact(r1)
        self.assertArtifact(r2)

        r3 = self.jolt("build whenunused:i=3")
        self.assertArtifact(r2)
        self.assertArtifact(r3)
        time.sleep(1)

        # 1s passed since i=2 was created, now reuse it
        r4 = self.jolt("build whenunused:i=2")
        self.assertNoBuild(r4)
        self.assertArtifact(r2)
        self.assertArtifact(r3)
        time.sleep(1)

        # 2s passed since i=2 was created, reused 1s ago => no eviction
        r4 = self.jolt("build whenunused:i=4")
        self.assertArtifact(r2)
        time.sleep(1)

        # 3s passed since i=2 was created, reused 2s ago => possible eviction
        r4 = self.jolt("build whenunused:i=5")
        time.sleep(1)

        # 4s passed since i=2 was created, reused 3s ago => guaranteed eviction
        r3 = self.jolt("build whenunusedargs")
        self.assertNoArtifact(r2)

    def test_expires_after(self):
        """
        --- tasks:
        class After(Task):
            i = Parameter()
            expires = expires.After(seconds=1)

        class AfterArgs(Task):
            expires = expires.After(weeks=1,days=1,hours=1,minutes=1,seconds=1)
        --- config:
        cachesize = 0G
        ---
        """
        r1 = self.jolt("build after:i=1")
        self.assertArtifact(r1)
        time.sleep(2)

        r2 = self.jolt("build after:i=2")
        self.assertArtifact(r2)
        self.assertNoArtifact(r1)

        r3 = self.jolt("build afterargs")

    def test_expires_after(self):
        """
        --- tasks:
        class NeverArgs(Task):
            expires = expires.Never()
        ---
        """
        self.jolt("build neverargs")

    def test_extends(self):
        """
        --- tasks:
        class Base(Task):
            pass

        class Extended(Task):
            i = Parameter()

            extends = "base"

            def run(self, deps, tools):
                raise_error_if(not deps["base"], "dependency missing")

        class ExtendedExtension(Task):
            i = Parameter()

            extends = "extended:i={{i}}"

            def run(self, deps, tools):
                raise_error_if(not deps[self.extends], "dependency missing")
        ---
        """
        r = self.jolt("build extended:i=1")
        self.assertBuild(r, "base")
        self.assertNoBuild(r, "extended:i=2")
        self.assertNoBuild(r, "extendedextension:i=3")
        r = self.jolt("build extended:i=2")
        self.assertBuild(r, "base")
        self.assertBuild(r, "extended:i=2")
        self.assertNoBuild(r, "extendedextension:i=3")
        r = self.jolt("build extendedextension:i=3")
        self.assertBuild(r, "base")
        self.assertBuild(r, "extended:i=3")
        self.assertBuild(r, "extendedextension:i=3")

    def test_extends_multiple(self):
        """
        --- tasks:
        class Base1(Task):
            pass

        class Base2(Task):
            pass

        class Extended(Task):
            extends = ["base1", "base2"]
        ---
        """
        with self.assertRaises(Exception, msg="multiple tasks extended"):
            self.jolt("build extended")

    def test_requires(self):
        """
        --- tasks:
        class Base(Task):
            pass

        class Consumer(Task):
            i = Parameter()

            requires = ["base"]

            def run(self, deps, tools):
                raise_error_if(not deps["base"], "dependency missing")

        class Duplicate(Task):
            requires = "base", "base", "base"
        ---
        """
        r = self.jolt("build consumer:i=1")
        self.assertBuild(r, "base")
        r = self.jolt("build consumer:i=2")
        self.assertNoBuild(r, "base")

        r = self.jolt("clean base")
        r = self.jolt("build duplicate -j2")
        t = self.tasks(r)
        self.assertEqual(t, ["base", "duplicate"])

    def test_selfsustained(self):
        """
        --- tasks:
        class A(Task):
            pass

        class B1(Task):
            requires = "a"
            selfsustained = False

        class B2(Task):
            requires = "a"
            selfsustained = True

        class C1(Task):
            requires = "b1"

            def run(self, deps, tools):
                print(deps["a"].path)

        class C2(Task):
            requires = "b2"

            def run(self, deps, tools):
                print(deps["a"].path)

        ---
        """
        self.jolt("build c1")
        with self.assertRaises(Exception, msg="no such dependency"):
            self.jolt("build c2")

        # Because B1 is not selfsustained, A becomes a transitive dependency of C1
        self.jolt("clean a")
        r = self.jolt("build -f c1")
        self.assertBuild(r, "a")
        self.assertBuild(self.lastLog(), "c1")

        # Because B2 is selfsustained, A is not a transitive dependency of C2
        self.jolt("clean a")
        with self.assertRaises(Exception, msg="no such dependency"):
            self.jolt("build -f c2")
        self.assertNoBuild(self.lastLog(), "a")
        self.assertBuild(self.lastLog(), "c2")



    def test_weight(self):
        """
        --- tasks:
        class A(Task):
            weight = 3

        class B(Task):
            weight = 1

        class C(Task):
            weight = 2

        ---
        """
        r = self.jolt("build a b c")
        self.assertEqual(self.tasks(r), ["a", "c", "b"])

    def test_param_bool(self):
        """
        --- tasks:
        class Pos(Task):
            arg = BooleanParameter()
            def run(self, deps, tools):
                assert self.arg, "unexpected value"

        class Neg(Task):
            arg = BooleanParameter()
            def run(self, deps, tools):
                assert not self.arg, "unexpected value"
        ---
        """
        with self.assertRaises(Exception):
            self.build("pos:arg=false")
        self.build("pos:arg=true")
        with self.assertRaises(Exception):
            self.build("neg:arg=true")
        self.build("neg:arg=false")


    def test_param_bool_regular(self):
        """
        --- tasks:
        class A(Task):
            arg = Parameter(required=False)
            def run(self, deps, tools):
                assert self.arg, "unexpected value"
        ---
        """
        with self.assertRaises(Exception):
            self.build("a")
        with self.assertRaises(Exception):
            self.build("a:arg=")
        self.build("a:arg=value")

    def test_param_influence(self):
        """
        --- tasks:
        class Influence(Task):
            arg = Parameter()

        class NoInfluence(Task):
            arg = Parameter(influence=False)

        ---
        """
        r = self.build("influence:arg=1 noinfluence:arg=1")
        self.assertBuild(r, "influence:arg=1")
        self.assertBuild(r, "noinfluence:arg=1")

        r = self.build("influence:arg=2 noinfluence:arg=2")
        self.assertBuild(r, "influence:arg=2")
        self.assertNoBuild(r, "noinfluence:arg=2")

    def test_param_explicit_default(self):
        """
        --- tasks:
        class A(Task):
            arg1 = Parameter("1")
            arg2 = Parameter("2")

        class B1(Task):
            # Requires "A" with default parameters
            requires = "a"

        class B2(Task):
            # Also requires "A" with default parameters, but with arg1 explicitly set
            requires = "a:arg1=1"

        class C(Task):
            requires = "b1", "b2"
        ---
        """
        r = self.build("c")
        t = self.tasks(r)
        self.assertEqual(len(t), 4)

    def test_param_list(self):
        """
        --- tasks:
        class A(Task):
            arg = ListParameter(values=["a", "b", "c"])

        class B(Task):
            requires = ["a:arg=a+b"]

            def run(self, deps, tools):
                deps["a:arg=a+b"]
                deps["a:arg=b+a"]
                try:
                    deps["a:arg=c"]
                except:
                    pass
                else:
                    assert False, "invalid dependency found"
        ---
        """
        self.build("b")
        r = self.build("a:arg=b+a")
        self.assertNoBuild(r, "a:arg=b+a")
        with self.assertRaises(Exception, msg="illegal value 'd' assigned to parameter 'arg'"):
            self.build("a:arg=a+b+d")

    def test_param_substitution(self):
        """
        --- tasks:
        class A(Task):
            arg1 = ListParameter(values=["a", "b"])
            arg2 = BooleanParameter()
            arg3 = BooleanParameter()

            def run(self, deps, tools):
                assert tools.expand("{{arg1[0]}}") == "a"
                assert tools.expand("{{arg1[a]}}") == "a"
                assert tools.expand("{{arg1[b]}}") == "None"
                assert tools.expand("{{arg1[a,1,2]}}") == "1"
                assert tools.expand("{{arg1[b,1,2]}}") == "2"

                assert tools.expand("{{arg2}}") == "true"
                assert tools.expand("{{arg2[enabled,disabled]}}") == "enabled"
                assert tools.expand("{{arg3}}") == "false"
                assert tools.expand("{{arg3[enabled,disabled]}}") == "disabled"
        ---
        """
        self.build("a:arg1=a,arg2=true,arg3=false")

    def test_param_list_bad_default(self):
        """
        --- tasks:
        class A(Task):
            arg = ListParameter(["d"], values=["a", "b", "c"])
        ---
        """
        with self.assertRaises(Exception):
            self.build("a")

    def test_param_list_operators(self):
        """
        --- tasks:
        class A(Task):
            arg = ListParameter()
            def run(self, deps, tools):
                assert self.arg == ["a", "b"]
                assert list(reversed(self.arg)) == ["b", "a"]
                assert self.arg[0] == "a"
                assert self.arg[1] == "b"
                assert self.arg[0:] == ["a", "b"]
                assert len(self.arg) == 2
        ---
        """
        self.build("a:arg=b+a")

    def test_param_list_expansion(self):
        """
        --- tasks:
        @attributes.attribute("test1", "test_{{arg[a]}}")
        @attributes.attribute("test2", "test_{{arg[a,a1]}}")
        @attributes.attribute("test3", "test_{{arg[a,a2,c]}}")
        @attributes.attribute("test4", "test_{{arg[c]}}")
        @attributes.attribute("test5", "test_{{arg[c,a1]}}")
        @attributes.attribute("test6", "test_{{arg[c,a2,c]}}")
        class A(Task):
            arg = ListParameter()
            test_True = "1"
            test_a1 = "2"
            test_a2 = "3"
            test_False = "4"
            test_None = "5"
            test_c = "6"
            def run(self, deps, tools):
                assert self.test1 == "1"
                assert self.test2 == "2"
                assert self.test3 == "3"
                assert self.test4 == "4"
                assert self.test5 == "5"
                assert self.test6 == "6"
        ---
        """
        self.build("a:arg=b+a")

    def test_run_output(self):
        """
        --- tasks:
        class Log(Task):
            def run(self, d, t):
                t.run("echo Hello > /dev/stdout")
                t.run("echo World > /dev/stderr")
        ---
        """
        self.jolt("build log")

    def test_context_indexing(self):
        """
        --- tasks:
        class A(Task):
            a = Parameter()
            b = Parameter("b")
            c = Parameter("c")

        class Pass1(Task):
            requires = ["a:a=1"]

            def run(self, deps, tools):
                print(deps["a:a=1"].path)

        class Pass2(Task):
            requires = ["a:a=1"]

            def run(self, deps, tools):
                print(deps["a:a=1,b=b,c=c"].path)

        class Pass3(Task):
            requires = ["a:a=1"]

            def run(self, deps, tools):
                print(deps["a:a=1,b=b"].path)

        class Pass4(Task):
            requires = ["a:a=1"]

            def run(self, deps, tools):
                print(deps["a:b=b,a=1"].path)

        class Fail1(Task):
            requires = ["a:a=1"]

            def run(self, deps, tools):
                print(deps["a:a=1,b=1"].path)


        class T1(Task):
            requires = ["a"]
        ---
        """
        self.build("pass1 pass2 pass3 pass4")
        with self.assertRaises(Exception, msg="no such dependency"):
            self.build("fail1")
