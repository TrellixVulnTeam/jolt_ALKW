import threading
import sys

from jolt import *


class Sigint(Task):
    def run(self, deps, tools):
        try:
            cond = threading.Condition(threading.Lock())
            cond.acquire()
            cond.wait(1000)
        except KeyboardInterrupt:
            pass

class Sigint2(Task):
    def run(self, deps, tools):
        tools.run("sleep 1000")


class Pass(Task):
    cacheable = False


class Fail(Task):
    def run(self, deps, tools):
        assert False, "This task always fails"


class _HiddenTask(Task):
    pass


class _HiddenTest(Test):
    pass


class Cli(Test):
    name = "test/cli"

    def jolt(self, cmd, *args, **kwargs):
        self.tools.run("jolt " + cmd, *args, **kwargs)

    def test_return_value(self):
        self.jolt("build pass")
        with self.assertRaises(Exception):
            self.jolt("build fail")

    def test_list_hidden(self):
        with self.assertRaises(Exception):
            self.jolt("list _hiddentask")
        with self.assertRaises(Exception):
            self.jolt("list _hiddentest")
