#!/usr/bin/env python

import re
import sys
import time
sys.path.append(".")

import testsupport


@testsupport.enable_network_testing
class BuildCli(testsupport.JoltTest):
    name = "cli/build"

    def test_return_value(self):
        """
        --- tasks:
        class Pass(Task):
            pass
        class Fail(Task):
            def run(self, deps, tools):
                assert False, "This task always fails"
        ---
        """
        self.build("pass")
        with self.assertRaises(Exception, msg="always fails"):
            self.build("fail")


    def test_force(self):
        """
        --- tasks:
        class Pass(Task):
            pass
        class Pass2(Task):
            pass
        ---
        """
        r1 = self.build("pass")
        self.assertBuild(r1, "pass")

        r2 = self.build("pass")
        self.assertNoBuild(r2, "pass")

        r3 = self.build("-f pass")
        self.assertBuild(r3, "pass")
        self.assertNotEqual(self.artifacts(r1), self.artifacts(r3))

        r4 = self.build("-f pass")
        self.assertBuild(r4, "pass")
        self.assertNotEqual(self.artifacts(r1), self.artifacts(r4))
        self.assertNotEqual(self.artifacts(r3), self.artifacts(r4))

        r5 = self.build("pass pass2")
        self.assertNoBuild(r5, "pass")
        self.assertBuild(r5, "pass2")

        r5 = self.build("-f pass pass2")
        self.assertBuild(r5, "pass")
        self.assertBuild(r5, "pass2")


    def test_salt(self):
        """
        --- tasks:
        class Pass(Task):
            pass
        ---
        """
        r1 = self.build("pass")
        self.assertBuild(r1, "pass")

        r2 = self.build("pass")
        self.assertNoBuild(r2, "pass")

        r3 = self.build("-s 1 pass")
        self.assertBuild(r3, "pass")
        self.assertNotEqual(self.artifacts(r1), self.artifacts(r3))

        r4 = self.build("-s 1 pass")
        self.assertNoBuild(r4, "pass")


    def test_default(self):
        """
        --- tasks:
        class A(Task):
            arg = Parameter("default")

            def run(self, d, t):
                print("x%sx" % self.arg.get_value())
                raise_error_if(True, "always fails")

        class B(Task):
            requires = ["a"]
        ---
        """
        with self.assertRaises(Exception, msg="always fails"):
            self.build("b")
        r1 = self.lastLog()
        self.assertBuild(r1, "a")
        self.assertIn("xdefaultx", r1)

        with self.assertRaises(Exception, msg="always fails"):
            self.build("b -d a:arg=nondefault")
        r2 = self.lastLog()
        self.assertBuild(r2, "a")
        self.assertIn("xnondefaultx", r2)


    def test_copy(self):
        """
        --- tasks:
        class A(Task):
            def run(self, d, t):
                pass

            def publish(self, a, t):
                a.collect("test.jolt", "test.py")
                a.collect("test.jolt", "directory/test.py")
        ---
        """
        r1 = self.build("a -c artifact/copy")
        self.assertExists(self.ws+"/artifact/copy/test.py")
        self.assertExists(self.ws+"/artifact/copy/directory/test.py")


    def test_result(self):
        """
        --- tasks:
        class Pass(Task):
            pass
        class Fail(Task):
            def run(self, deps, tools):
                assert False, "This task always fails"
        ---
        """
        r1 = self.build("pass --result pass.xml")
        self.assertExists(self.ws+"/pass.xml")
        self.assertIn('task name="pass"', self.tools.read_file(self.ws+"/pass.xml"))

        with self.assertRaises(Exception, msg="always fails"):
            r1 = self.build("fail --result fail.xml")
        self.assertExists(self.ws+"/fail.xml")
        self.assertIn('task name="fail"', self.tools.read_file(self.ws+"/fail.xml"))


    def test_keep_going(self):
        """
        --- tasks:
        class Pass(Task):
            pass
        class Pass2(Task):
            requires = "pass"
            weight = 2
        class Fail(Task):
            def run(self, deps, tools):
                assert False, "This task always fails"
        ---
        """
        with self.assertRaises(Exception, msg="always fails"):
            self.build("-k pass2 fail")
        r1 = self.lastLog()
        self.assertBuild(r1, "pass2")


    def test_task_deduplication(self):
        """
        --- tasks:
        class Sleep(Task):
            t = Parameter()

            def run(self, d, tools):
                tools.run("sleep {{t}}")
        ---
        """
        if not self.network:
            self.skipTest("network build deployment required")

        # Starting two builds in parallel
        with self.assertRaises(Exception), self.tools.cwd(self.ws):
            self.tools.run("timeout 5 jolt -c test.conf -c net.conf -c jolt.cachedir=c1 "
                           "build -n sleep:t=10")
        self.jolt("-c jolt.cachedir=c2 build -n sleep:t=10")
        self.tools.run("sleep 10")

        # Assert that only one build request reaches the worker
        log = self.tools.run("docker logs jolt_amqp_worker", output=False)
        matches = re.findall(r"Finalizing: sleep:t=10", log, re.M)
        print(matches)
        self.assertEqual(len(matches), 1)


    def test_fast_task(self):
        """
        --- tasks:
        class R(Resource):
            pass

        class A(Task):
            fast = True
            requires = "r"

        class B(Task):
            requires = "a", "r"

        class C(Task):
            requires = "b"
        ---
        """
        if not self.network:
            self.skipTest("network build deployment required")

        r1 = self.build("c")
        l1 = self.tasks(r1, local=True)
        self.assertEqual(l1, ["a"])

    def test_fast_task_with_deps(self):
        """
        --- tasks:
        class R(Resource):
            pass

        class A(Task):
            pass

        class B(Task):
            fast = True
            requires = "a", "r"

        class C(Task):
            requires = "b"
        ---
        """
        if not self.network:
            self.skipTest("network build deployment required")

        r1 = self.build("c")
        l1 = self.tasks(r1, local=True)
        self.assertEqual(l1, [])

        r1 = self.build("-s 1 a r")
        l1 = self.tasks(r1, remote=True)
        self.assertEqual(l1, ["a"])
        r2 = self.build("-s 1 c")
        l2 = self.tasks(r2, local=True)
        self.assertEqual(l2, ["b"])
