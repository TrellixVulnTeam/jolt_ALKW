import sys
import time
sys.path.append(".")

from testsupport import JoltTest


class InfoCli(JoltTest):
    name = "cli/info"

    def test_name(self):
        """
        --- tasks:
        class Explicit(Task):
            name = "explicit1"
        ---
        """
        self.jolt("build explicit1")

    def test_info_invalid(self):
        """ """
        with self.assertRaises(Exception):
            self.jolt("info non-existing-task")

    def test_info(self):
        """
        --- tasks:
        class TaskName(Task):
            \"\"\" docstring \"\"\"
            pass
        ---
        """
        output = self.jolt("info taskname")
        self.assertIn("taskname", output)
        self.assertIn("docstring", output)
        self.assertIn("Parameters\n    None", output)
        self.assertIn("Requirements\n    None", output)

    def test_info_parameterized(self):
        """
        --- tasks:
        class A(Task):
            arg1 = Parameter(help="docstring")
        ---
        """
        output = self.jolt("info a")
        self.assertIn("Parameters\n    arg1", output)
        self.assertIn("docstring", output)

    def test_info_requirements_ok(self):
        """
        --- tasks:
        class A(Task):
            pass

        class B(Task):
            requires = ["a"]

        class C(Task):
            def requires(self):
                return ["a"]
        ---
        """
        output = self.jolt("info b")
        self.assertIn("Requirements\n    a", output)
        output = self.jolt("info c")
        self.assertIn("Requirements\n    a", output)

    def test_info_requirements_param(self):
        """
        --- tasks:
        class A(Task):
            arg = Parameter()

        class B(Task):
            arg = Parameter()
            requires = ["a:arg={{arg}}"]

        class C(Task):
            arg = Parameter()
            def requires(self):
                return ["a:arg={{arg}}"]
        ---
        """
        output = self.jolt("info b")
        self.assertIn("Requirements\n    Unavailable", output)
        output = self.jolt("info c")
        self.assertIn("Requirements\n    Unavailable", output)

        output = self.jolt("info b:arg=value")
        self.assertIn("Requirements\n    a:arg=value", output)
        output = self.jolt("info c:arg=value")
        self.assertIn("Requirements\n    a:arg=value", output)

    def test_info_requirements_exception(self):
        """
        --- tasks:
        class A(Task):
            def requires(self):
                raise "broken"
        ---
        """
        output = self.jolt("info a")
        self.assertIn("Parameters\n    None", output)
        self.assertIn("Unavailable", output)
