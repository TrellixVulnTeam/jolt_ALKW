import os

from jolt import *
from jolt import utils
from jolt import influence


influence.global_files("../jolt/*.py")
influence.global_files("../jolt/plugins/*.py")


class Tests(Task):
    requires = \
        "test/artifact", \
        "test/cli", \
        "test/tasks", \
        "test/tools", \
        "test/utils", \
        "test/parameterized:param=test"


class TasksTask(Task):
    name = "test/tasks/task"

    def run(self, deps, tools):
        print(self.identity)
        assert self.identity is not None, \
            "task identity not readable from task"


class TaskTest(Test):
    """ This is a parameterized test task """

    name = "test/parameterized"

    param = Parameter()

    def test_param(self):
        self.assertTrue(self.param.get_value())


class GeneratedTask(TaskGenerator):
    def generate(self):
        class Tasks(Test):
            name = "test/tasks"

            requires = "test/tasks/task"

            def test_identity(self):
                print(self.identity)
                self.assertTrue(self.identity is not None)

        return [Tasks]


class Tools(Test):
    name = "test/tools"

    def setup(self, deps, tools):
        self.tmpdir = self.tools.builddir("tmpdir")

    def assertExists(self, filepath):
        self.assertTrue(os.path.exists(filepath))

    def test_tools_extract_zip(self):
        with self.tools.cwd(self.tmpdir):
            self.tools.run("zip tests.zip ../tests.jolt")
            self.tools.extract("tests.zip", self.tmpdir)
            self.assertExists("tests.jolt")

    def test_tools_extract_tar_gz(self):
        with self.tools.cwd(self.tmpdir):
            self.tools.run("tar czvf tests.tar.gz ../tests.jolt")
            self.tools.extract("tests.tar.gz", self.tmpdir)
            self.assertExists("tests.jolt")

    def test_tools_extract_tar_bz2(self):
        with self.tools.cwd(self.tmpdir):
            self.tools.run("tar cjvf tests.tar.bz2 ../tests.jolt")
            self.tools.extract("tests.tar.bz2", self.tmpdir)
            self.assertExists("tests.jolt")


class Utils(Test):
    name = "test/utils"

    def setup(self, deps, tools):
        self.tmpdir = self.tools.builddir("tmpdir")

    @utils.retried.on_exception(AssertionError)
    def raise1(self):
        self.exc_count += 1
        assert self.exc_count > 1, "failed!"

    @utils.retried.on_exception(AssertionError, count=2)
    def raise2(self):
        self.exc_count += 1
        assert self.exc_count > 2, "failed!"

    def test_retried_on_exception(self):
        self.exc_count = 0
        with self.assertRaises(AssertionError):
            self.raise2()
