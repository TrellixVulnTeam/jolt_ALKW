import os

from jolt import *
from jolt import utils
from jolt.plugins import directory


directory.global_influence("..", "*.py")
directory.global_influence("../jolt/plugins", "*.py")


class Tests(Task):
    requires = \
        "test/artifact", \
	"test/cli", \
        "test/tools", \
        "test/utils"


class Tools(Test):
    name = "test/tools"

    def setup(self, deps, tools):
        self.tmpdir = self.tools.builddir("tmpdir")

    def assertExists(self, filepath):
        self.assertTrue(os.path.exists(filepath))

    def test_tools_extract_zip(self):
        with self.tools.cwd(self.tmpdir):
            self.tools.run("zip tests.zip ../tests.jolt")
            self.tools.extract("tests.zip", self.tmpdir)
            self.assertExists("tests.jolt")

    def test_tools_extract_tar_gz(self):
        with self.tools.cwd(self.tmpdir):
            self.tools.run("tar czvf tests.tar.gz ../tests.jolt")
            self.tools.extract("tests.tar.gz", self.tmpdir)
            self.assertExists("tests.jolt")

    def test_tools_extract_tar_bz2(self):
        with self.tools.cwd(self.tmpdir):
            self.tools.run("tar cjvf tests.tar.bz2 ../tests.jolt")
            self.tools.extract("tests.tar.bz2", self.tmpdir)
            self.assertExists("tests.jolt")


class Utils(Test):
    name = "test/utils"

    def setup(self, deps, tools):
        self.tmpdir = self.tools.builddir("tmpdir")

    @utils.retried.on_exception(AssertionError)
    def raise1(self):
        self.exc_count += 1
        assert self.exc_count > 1, "failed!"

    @utils.retried.on_exception(AssertionError, count=2)
    def raise2(self):
        self.exc_count += 1
        assert self.exc_count > 2, "failed!"

    def test_retried_on_exception(self):
        self.exc_count = 0
        with self.assertRaises(AssertionError):
            self.raise2()
